body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
}

.container {
    width: 80%;
    margin: auto;
    padding: 20px;
    background-color: #fff;
    
    box-shadow: 5px 10px 10px 0px rgba(0, 0, 0, 0.177);
}

.card{
    width: 80%;
    margin: auto;
    margin-top: 3rem;
    padding: 10px;
    background-color: rgba(112, 210, 14, 0.25);
    box-shadow: 2px 2px 3px 0px rgba(0, 0, 0, 0.422); /*boxs shadow: (4 dimensiones), color */

}


.box{
    width: 100px;
    height: 100px; /* lo alto y ancho es es tamaño del contenido */
    background: cyan;
    border: 10px solid blue; /* border: grosor, (tipo de traso), color */
    padding: 10px; /* tamaño interior empieza despues del contenido*/
    margin: 10px; /* tamaño exterior de la caja */


    box-sizing:border-box;

    /*
    box-sizing: content-box; es el valor por defecto (tamaño del contenido + pagging + margin + borde)

    box-sizing: border-box; solo el valor del contenido (el paggin, margin etc se agregan dentro del tamaño inicial del contenido)

    box-sizing: inherit; El elemento hereda el valor de box-sizing de su elemento padre.
    */
}

.container-without-background{
    width: 80%;
    margin: auto;
    padding-top: 2rem;
}

.layout
{
    width: fit-content; /* este contenido se ajuta a lo qeu contiene */
    background-color: red;
    
}

img
{
    width: 200px;
    height: 200px;
    padding: 10px;
    margin: 20px;
    background-color: yellow;
    border: 10px solid green;

    box-sizing: border-box; /* tamaño maximo 200px */
    
}

/* ########### display ##################*/


.cuadrado{
    width: 200px;
    height: 200px;
    background-color: greenyellow;
    margin: 1rem;
    /*
    Tipos de display en CSS:

    1. display: none;
        - Oculta el elemento, no ocupa espacio en el diseño.

    2. display: block;
        - El elemento se comporta como un bloque, ocupando todo el ancho disponible.

    3. display: inline;
        - El elemento se comporta como un elemento en línea, ocupando solo el espacio necesario.

    4. display: inline-block;
        - Combina características de inline y block, permitiendo definir dimensiones pero manteniéndose en línea.

    5. display: flex;
        - Define un contenedor flexible, permitiendo la alineación y distribución de elementos hijos.

    6. display: inline-flex;
        - Similar a flex, pero el contenedor se comporta como un elemento en línea.

    7. display: grid;
        - Define un contenedor de cuadrícula, permitiendo la alineación y distribución de elementos hijos en filas y columnas.

    8. display: inline-grid;
        - Similar a grid, pero el contenedor se comporta como un elemento en línea.

    9. display: table;
        - El elemento se comporta como una tabla HTML.

    10. display: table-row;
         - El elemento se comporta como una fila de tabla.

    11. display: table-cell;
         - El elemento se comporta como una celda de tabla.

    12. display: table-column;
         - El elemento se comporta como una columna de tabla.

    13. display: table-column-group;
         - El elemento se comporta como un grupo de columnas de tabla.

    14. display: table-footer-group;
         - El elemento se comporta como un grupo de pie de tabla.

    15. display: table-header-group;
         - El elemento se comporta como un grupo de encabezado de tabla.

    16. display: table-row-group;
         - El elemento se comporta como un grupo de filas de tabla.

    17. display: table-caption;
         - El elemento se comporta como una leyenda de tabla.

    18. display: list-item;
         - El elemento se comporta como un elemento de lista.

    19. display: run-in;
         - El elemento se comporta como un bloque o en línea, dependiendo del contexto.

    20. display: contents;
         - Hace que los hijos del elemento se comporten como si fueran hijos directos
    */
    display: inline-block;
}
